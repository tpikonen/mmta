#!/bin/sh
# mmta, a minimal mail transport agent
# Copyright: 2008-2017 Teemu Ikonen <tpikonen@gmail.com>
# License: GPLv3+

MMDA=@@MMDABIN@@
MMTASQ=@@MMTASQBIN@@
USERCONFEND=@@USERCONFDIR@@
USERCONFDIR="$HOME/$USERCONFEND"
SYSCONFDIR=@@SYSCONFDIR@@
PINGHOST="www.google.com"
PWFILE="/etc/passwd"
ALIASFILE="/etc/aliases"

# mmda exit codes
E_MMDA_NODELIVR=8   # No delivery at all
E_MMDA_UMBXFAIL=7   # User mbox could not be delivered, other
                    # targets possibly were
E_MMDA_MBOXFAIL=6   # Could not deliver to mbox target
E_MMDA_FILEFAIL=5   # Could not deliver to file target
E_MMDA_PIPEFAIL=4   # Could not deliver to pipe target
E_MMDA_QFAIL=3      # 'queue-mail' script failed


# complain $MESSAGE
# Print and log a string
complain ()
{
    [ -z "$1" ] && return 0
    logger -t mmta "$1"
    echo "$1" >&2
}


# die $EXITCODE $MESSAGE
# Print and log a message and exit
die () {
    complain "$2"
    complain "Exiting with code $1"
    exit $1
}


is_online ()
{
    ping -c 1 -w 2 $PINGHOST > /dev/null 2>&1
}

# Routines for handling comma-separated lists

# append $LIST $A
# append $A to $LIST
append ()
{
    if [ -z "$1" ] ; then
        echo "$2"
    elif [ -z "$2" ] ; then
        echo "$1"
    else
        echo "$1,$2"
    fi
}


# cdr $LIST
# Get the tail part of $LIST, or empty string if list has one element
cdr ()
{
    echo "$1" | sed 's/^[^,]*,*\(.*\)/\1/'
}


# contains $LIST $A
# returns 0 if $LIST contains $A
contains()
{
    local PLIST ITEM P
    PLIST="$1"
    ITEM="$2"
    P=""
    while [ "$PLIST" != "$P" ] ; do
        P=${PLIST%%,*}
        PLIST=${PLIST#*,}
        if [ "$ITEM" = "$P" ] ; then
            return 0
        fi
    done
    return 1
}


# map_list $FUNC $LIST
# Apply $FUNC to each element of $LIST and output the result to stdout
# If $LIST is '-', read list from stdin
map_list ()
{
    local FUNC LIST A ALIST
    FUNC=$1
    LIST=$2

    if [ "$LIST" = "-" ] ; then
        ALIST=$(cat)
    else
        ALIST="$LIST"
    fi
    if [ -z "$ALIST" ] ; then
        return
    fi
    A=${ALIST%%,*}
    ALIST=$(cdr "$ALIST")
    $FUNC "$A"
    while [ -n "$ALIST" ] ; do
        A=${ALIST%%,*}
        ALIST=$(cdr "$ALIST")
        echo -n ","
        $FUNC "$A"
    done
}


# Other functions

# Check if a given username is in /etc/passwd
# and the users shell is in /etc/shells
check_username()
{
    local USERSHELL
    USERSHELL=`grep "^${1}:" ${PWFILE} | cut -d: -f7`
    [ -n "$USERSHELL" ] || return 1
    grep -v '^#' /etc/shells | grep -q $USERSHELL
    return $?
}


# get_aliases $UNAME
# echo the logical line after $UNAME: in $ALIASFILE
get_aliases()
{
    local UNAME
    UNAME=$1
    [ -r $ALIASFILE ] && grep -v '^#' $ALIASFILE | sed -n "
/^$UNAME:/ {
    s/\\\\$// ; h ; t sawslash
    :loop
    $ b exit
    n
    s/^\S// ; t exit
    s/\\\\$// ; H ; $ b exit
    t sawslash
    b loop
    :sawslash
    n
    s/\\\\$// ; H ; $ b exit
    t sawslash
    b loop
    :exit
    x
    s/\n//g
    s/$UNAME:\s*//
    s/\s*,\s*/,/g
    s/,$//
    p
}"
    return 1
}


# resolve_aliases $UNAME
# Recursively alias-expand $UNAME. Output in global vars AL_LOCLIST, etc.
# If user does not have aliases, returns $UNAME
resolve_aliases()
{
    local UNAME PROCESSED A ALIST LIST
    UNAME=$1
    PROCESSED=$1
    AL_LOCLIST=""
    AL_INETLIST=""
    AL_PIPELIST=""
    AL_FILELIST=""
    AL_MDIRLIST=""
    AL_INCLIST=""
    AL_ERRLIST=""

    ALIST=$(get_aliases $UNAME)
    A=""
    while [ -n "$ALIST" ] ; do
        A=${ALIST%%,*}
        ALIST=$(cdr "$ALIST")
        if contains "$PROCESSED" "$A" ; then
            complain "Warning: aliases file has a loop with user $A"
            continue
        fi
        # FIXME: Some alias targets (like error messages) can contain commas.
        case "$A" in
            /*) # Filename
                AL_FILELIST=$(append "$AL_FILELIST" "$A") ;;
            \|*) # Pipe
                AL_PIPELIST=$(append "$AL_PIPELIST" "${A##|}") ;;
            :include:*) # Include file
                AL_INCLIST=$(append "$AL_INCLIST" "${A##:include:}") ;;
            error:*) # Error code and message
                # Just append everything to a list
                AL_ERRLIST=$(append "$AL_ERRLIST" "${A##error:}") ;;
            maildir:*) # Maildir path
                AL_MDIRLIST=$(append "$AL_MDIRLIST" "${A##maildir:}") ;;
            *@*) # Inet mailaddress
                AL_INETLIST=$(append "$AL_INETLIST" "$A") ;;
            *) # Local address?
                LIST=$(get_aliases $A)
                if [ -n "$LIST" ] ; then
                    ALIST=$(append "$ALIST" "$LIST")
                    PROCESSED=$(append "$PROCESSED" "$A")
                else
                    AL_LOCLIST=$(append "$AL_LOCLIST" "$A")
                fi ;;
        esac
    done
    if [ -z "$AL_LOCLIST" ] ; then
        AL_LOCLIST=$UNAME
    fi
    return 1
}


# find_script $SCRIPTFILE $SHELLVAR
# Checks configuration directories for a given SCRIPTFILE and if
# found, sets the shell variable whose name is given in SHELLVAR
# to the full path of the script
find_script ()
{
    if [ -x "$USERCONFDIR/$1" ] ; then
        eval "$2=$USERCONFDIR/$1"
    elif [ -x "$SYSCONFDIR/$1" ] ; then
        eval "$2=$SYSCONFDIR/$1"
    else
        die 1 "Could not find script $1"
    fi
}


# read_header $FIELD
# return the content of a header field $FIELD from an
# RFC 2822 format file read from stdin
read_header ()
{
    local FIELD
    FIELD=$1

    sed -n "
    /^$/ q
    /^${FIELD}:/ {
        h
        :getline
        $ b output
        n
        /^$/ b output
        /^\S/ b output
        H ; b getline
        :output
        x
        s/^${FIELD}: *//
        s/\n//g
        p ; q
    }"
}


# clean_addr $ADDR
# Given an address read from RFC 2822 address header list (To: etc.)
# output only the email address and not the display-name part
clean_addr ()
{
    echo -n $1 | sed 's/.*<\(.*\)>.*/\1/'
}


# clear_bcc $FILE
# Remove the contents of the Bcc-header in RFC 2822 format $FILE
clear_bcc ()
{
    sed -i '/^$/ { :skip ; n ; b skip }
            /^Bcc:/ { s/^Bcc:.*$/Bcc:/ ; :end ; n ; b end }' $1
}


# forwardfail_mail $UNAME $MMDA_ECODE
# mail $UNAME about the failure of .forward targets
forwardfail_mail ()
{
    local UNAME MMDA_ECODE
    UNAME=$1
    MMDA_ECODE=$2

   $MMDA --force-mbox $UNAME <<@EOF@
From: MMTA mail system <postmaster@localhost>
To: ${UNAME}
Subject: Failures in mail forwarding of your account

Dear ${UNAME},

Your mail account had failures in delivering messages via the .forward
mechanism. Please check your mail forwarding.

This message has been sent automatically by the MMTA mail transfer program.

Best,
Postmaster at $(hostname)
@EOF@
}

[ -x $MMDA ] || die 1 "Mail delivery program $MMDA not executable."

# Mail errors to sender by default
MAIL_ERRORS=1
SEND_TO_SELF=1
PARSE_MSG=0
RECIPIENTS=""
while [ $# -gt 0 ] ; do
    PAR=$1
    case $PAR in
        # sendmail options defined in LSB:
        -bm) # Read msg from stdin, default
            ;;
        -bp) # list mail-queue info,
            die 5 "Got option '-bp', mail queue listing is not supported."
            ;;
        -bs) # Read and write raw SMTP protocol, unsupported
            die 5 "Got option '-bs', direct SMTP protocol is not supported."
            ;;
        -F*) # Set the full name of the sender, unsupported
            complain "Option $PAR (set full name) not supported, continuing."
            ;;
        -f*) # Set the envelope from address (and From:, if there's none).
             # Unsopported.
            complain "Option $PAR (set envelope from) not supported, continuing"
            ;;
        -i|-oi) # Don't terminate reading input after a line with a single dot
            # not implemented yet (on by default)
            ;;
        -odb) # Deliver mail in background, ignored
            ;;
        -odf) # Deliver mail in foreground, default for local delivery,
              # otherwise ignored
            ;;
        -oem|-em) # Mail errors back to sender, default
            MAIL_ERRORS=1 ;;
        -oep|-ep) # Write errors to stderr
            MAIL_ERRORS=0 ;;
        -om) # Mail a copy to sender if sender appears in alias expansion
            SEND_TO_SELF=1 ;;
        -t) # Parse To:, Cc: and Bcc: header from msg to obtain recipients
            PARSE_MSG=1 ;;
        --) # Next arg is first recipient, break out
            shift
            break 2 ;;
        -*)
            complain "Warning: Ignoring unknown parameter $PAR" ;;
        *) # Already at first recipient
            break 2 ;;
    esac
    shift
done

find_script "can-send" "CAN_SEND"
find_script "queue-mail" "QUEUE_MAIL"
find_script "send-queue" "SEND_QUEUE"

for PAR in $@ ; do
    RECIPIENTS="$RECIPIENTS,$PAR"
done

TEMPF=$(tempfile -p mmta-)
[ "$?" = "0" ] || die 1 "Could not create a temporary file"

cat >> $TEMPF

if [ "$PARSE_MSG" = "1" ] ; then
    TOLIST=$(cat $TEMPF | read_header "To" | map_list "clean_addr" -)
    CCLIST=$(cat $TEMPF | read_header "Cc" | map_list "clean_addr" -)
    BCCLIST=$(cat $TEMPF | read_header "Bcc" | map_list "clean_addr" -)
    RECIPIENTS=$(append "$RECIPIENTS" "$TOLIST")
    RECIPIENTS=$(append "$RECIPIENTS" "$CCLIST")
    RECIPIENTS=$(append "$RECIPIENTS" "$BCCLIST")
    clear_bcc $TEMPF
fi

$CAN_SEND
SEND_INET=$?

# Local delivery loop
LOCAL_SENT=""
INET_RECV=""
FORWARDERS=""
FAILED_USERS=""
ALIST=$RECIPIENTS
while [ -n "$ALIST" ]; do
    A=${ALIST%%,*}
    ALIST=$(cdr "$ALIST")
    R=${A%%@localhost*}
    R=${R%%@$HOSTNAME}
    case $R in
        *@*)
            INET_RECV=$(append "$INET_RECV" "$R")
            continue ;;
        *)
            resolve_aliases $R
            # Only allow aliasing to local users
            [ -z "$AL_INETLIST" ] \
                || complain "/etc/aliases has aliases to external addresses."
            [ -z "$AL_PIPELIST" ] \
                || complain "/etc/aliases has aliases to pipes."
            [ -z "$AL_FILELIST" ] \
                || complain "/etc/aliases has aliases to files."
            [ -z "$AL_MDIRLIST" ] \
                || complain "/etc/aliases has aliases to maildirs."
            [ -z "$AL_ERRLIST" ] \
                || complain "/etc/aliases has aliases to error targets."
            [ -z "$AL_INCLIST" ] \
                || complain "/etc/aliases contains includes."
            if [ "$R" != "$AL_LOCLIST" ] ; then
                ALIST=$(append "$AL_LOCLIST" "$ALIST")
                continue
            fi ;;
    esac
    if check_username "$R" ; then
        true
    else
        continue
    fi
    if contains "$LOCAL_SENT" "$R" ; then
        continue
    fi
    LOGTEMP=$(tempfile -p mmta-)
    [ "$?" = "0" ] || die 1 "Could not create a temporary file"
    if [ "$SEND_INET" = "0" ] ; then
        # We can send external mail, do not use the recipients mail
        # queue, get local and external addresses from recipients
        # .forward and deliver to rest of the .forward targets.
        FWDLIST=$(cat $TEMPF | $MMDA --no-external $R 2> $LOGTEMP)
        MMDA_ECODE=$?
    else
        # We cannot send external mail, get local addresses from recipients
        # .forward and deliver to external addresses by running recipients
        # 'queue-mail' script. Also deliver to rest of the .forward targets.
        FWDLIST=$(cat $TEMPF | $MMDA $R 2> $LOGTEMP)
        MMDA_ECODE=$?
        FORWARDERS=$(append "$FORWARDERS" "$R")
    fi
    complain $(cat $LOGTEMP)
    rm -f $LOGTEMP
    FWDLIST=$(echo $FWDLIST | sed -n '1h;1!H;${;g;s/\n/,/g;p;}')
    ALIST=$(append "$FWDLIST" "$ALIST")
    LOCAL_SENT=$(append "$LOCAL_SENT" "$R")
    case "$MMDA_ECODE" in
        "0")
            # Success.
            true
            ;;
        "$E_MMDA_NODELIVR"|"$E_MMDA_UMBXFAIL")
            # Complete failure, or user mbox could not be delivered to.
            complain "Delivery from $(whoami) to $R failed"
            complain "$MMDA exit code $MMDA_ECODE"
            FAILED_USERS=$(append "$FAILED_USERS" "$R")
            ;;
        "$E_MMDA_MBOXFAIL"|"$E_MMDA_FILEFAIL"|"$E_MMDA_PIPEFAIL"|"$E_MMDA_QFAIL")
            # Fails in forward file targets.
            complain "Some .forward targets of user $R failed."
            complain "$MMDA exit code $MMDA_ECODE"
            forwardfail_mail "$R" "$MMDA_ECODE"
            ;;
        *)
            complain "Unknown error in delivery from $(whoami) to $R"
            complain "$MMDA exit code $MMDA_ECODE"
            ;;
    esac
done

INET_RECV=$(echo -n ${INET_RECV} | tr ',' '\n' | sort | uniq | tr '\n' ',')

# Do internet delivery
if [ "$SEND_INET" = "0" ] ; then
    if [ -n "$INET_RECV" ] ; then
        QARGS=$(echo $INET_RECV | tr ',' ' ')
        # FIXME: Check return values of script calls
        cat $TEMPF | $QUEUE_MAIL $QARGS
        if is_online ; then
            $SEND_QUEUE
        fi
    fi
else
    if [ -n "$INET_RECV" ] ; then
        # Original recipients had external addresses, but we cannot send.
        FAILED_USERS=$(append "$FAILED_USERS" "$INET_RECV")
        complain "Warning: $USER could not send to following external addresses: $INET_RECV"
    fi
    if is_online ; then
        # Run outgoing queues from people who were sent mail
        ALIST=$FORWARDERS
        ( while [ -n "$ALIST" ] ; do
            A=${ALIST%%,*}
            ALIST=$(cdr "$ALIST")
            $MMTASQ $A
        done ) & # FIXME: disown?
    fi
fi

if [ -n "$FAILED_USERS" ] && [ "$MAIL_ERRORS" = "1" ] ; then
    $MMDA "$USER" <<@EOF@
From: MMTA mail system <postmaster@localhost>
To: ${USER}
Subject: Failures in delivery of your mail

Dear ${USER},

There were problems delivering your mail to the following addresses:

${FAILED_USERS}

This message has been sent automatically by the MMTA mail transfer program.

Best,
Postmaster at ${HOSTNAME}
@EOF@

fi

rm -f $TEMPF
exit 0
